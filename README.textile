h1. Overview

InventoryKit is a free open source library that provides a synchronous (blocking) wrapper around Apple's StoreKit API for managing in-app purchases. It also supports programmatic activation of products, allowing you to offer unique and exciting features to your users. In games, for example, you can have an achievement that unlocks a feature the player would otherwise need to buy. It's also easy to include easter eggs that activate products. IK also makes it easy to prompt the user to buy a product, providing a simple asynchronous helper method and delegate interface.

Currently, IK only supports non-consumable purchases. Future releases aim to include support for consumables and subscriptions.

h1. History

IK was originally written as part of Scorch ("App Store link":http://itunes.com/app/scorch) to transition between the "lite/paid" split app paradigm to the "free + in-app purchase" single app paradigm. The problem was the folks who bought the paid app should be able to continue to use the features they bought, while also taking advantages of updates. The strategy was to remove the "lite" version from the App Store and set the price of the paid version to zero (free). Then, the features from the paid version were made available as in-app upgrades. Clearly, the folks who already paid for the app would not be happy to be forced to pay again for the same features.

IK solves this problem by providing a transition mechanism, whereby you issue an update to your paid app before you perform the conversion process described above. This update includes a plist describing all the products to be transitioned, as well as a single line of code to be included in your app delegate. Release an update with this change, then wait a month or two to allow your users to update before enabling the in-app purchases.

h1. Installation

You are recommended to use IK as a git submodule. From your project's git root directory, type this:

<pre>
git submodule add git@github.com:agoodman/inventory-kit.git
</pre>

Then, in Xcode, add the InventoryKit directory to your project. Once you've done that, you can use any of the IK API features by simply adding the following line to your .m file or, alternatively, to your xxx_Prefix.pch file:

<pre>
#import "InventoryKit.h"
</pre>

h1. Configuration

Once you have configured your in-app purchase products in iTunes Connect, you can use the product IDs with IK right away.

h2. Transitioning Your App

The transition process is simple. Create a file in your resource bundle called <code>TransitionProducts.plist</code>. See the example in the IKExample app for more details. Once you have this file in your resource bundle, you must add the following line of code to your app delegate:

<pre>
[InventoryKit prepareTransitionProducts];
</pre>

That's it. The first time the user runs the app after updating with this code included, IK will populate their inventory with the product IDs listed in the plist. Then, they will be ready to transition to the new paradigm, and they will have uninterrupted access to the features they bought.

NOTE: *You must remove this line of code before publishing the free version of the app.* Otherwise, you will be guaranteeing that every user has full access to all the in-app upgrades without paying you.

h2. Bundles

With Scorch 1.2, bundles were introduced. This feature allows you to package multiple in-app purchase products together as a bundle. Bundles are treated exactly the same as products. They each must have a unique product ID configured in iTunes Connect. You trigger a bundle purchase exactly the same way you do a stand-alone product. The difference is that IK looks for a configuration file (another plist) in your resource bundle. Create a new file in your project called <code>IKBundles.plist</code>. See the example in the IKExample app for more details. When IK receives successful purchase callbacks from StoreKit, it automatically activates all the product IDs associated with the given bundle product ID.

h1. Usage

Using IK is a snap. There are a handful of synchronous methods for querying and manipulating product activation. There are also a handful of asynchronous methods and a corresponding delegate for guiding the user through the purchasing process and for restoring purchases the user made (potentially on a different device).

h2. Product Activation

* Activate/Deactivate a Product

<pre>
[InventoryKit activateProduct:@"your.product.id"];
[InventoryKit deactivateProduct:@"your.product.id"];
</pre>

* Query Product Activation

<pre>
[InventoryKit productActivated:@"your.product.id"];
</pre>

h2. Product Purchase

<pre>
[InventoryKit purchaseProduct:@"your.product.id" delegate:yourDelegate];
</pre>

h2. Restore Purchases

<pre>
[InventoryKit restoreProducts:yourDelegate];
</pre>

h1. Profit

That's it. You're ready to make money. InventoryKit is free to use and improve, but I always accept donations. Please send them via PayPal to aubrey.goodman@gmail.com. Remember me when you make your millions.

Â© 2009 Migrant Studios. All rights reserved. InventoryKit is made available through the MIT License.

